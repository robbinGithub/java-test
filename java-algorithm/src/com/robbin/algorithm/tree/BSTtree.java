package com.robbin.algorithm.tree;
/**
 * BST树

       即二叉搜索树：

       1.所有非叶子结点至多拥有两个儿子（Left和Right）；

       2.所有结点存储一个关键字；

       3.非叶子结点的左指针指向小于其关键字的子树，右指针指向大于其关键字的子树；

       如：
       
        BST树的搜索，从根结点开始，如果查询的关键字与结点的关键字相等，那么就命中；

	否则，如果查询关键字比结点关键字小，就进入左儿子；如果比结点关键字大，就进入
	
	右儿子；如果左儿子或右儿子的指针为空，则报告找不到相应的关键字；
	
	       如果BST树的所有【非叶子结点】的【左右子树的结点数目】均保持差不多（【平衡】），那么B树
	
	的搜索性能这【逼近二分查找】；但它比【连续内存空间的二分查找】的优点是，改变BST树结构
	
	（插入与删除结点）不需要移动大段的内存数据，甚至通常是常数开销；
	
	
	右边也是一个BST树，但它的搜索性能已经是线性的了；同样的关键字集合有可能导致不同的

	树结构索引；所以，使用BST树还要考虑尽可能让BST树保持左图的结构，和避免右图的结构，也就
	
	是所谓的“平衡”问题；  


       
 * @author robbin.zhang
 * @date 2017/03/16 13:03
 * @see http://blog.csdn.net/sup_heaven/article/details/39313731
 *
 */
public class BSTtree {

}
